<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#+
public class EFContextTemplate : TextTransformation
{
	public string EntityAttribute = "A.Core.Attributes.EntityAttribute";
	ServiceTemplateConfig Config {get; set;}
	AutomationHelper VisualStudioHelper {get; set;}
	public EFContextTemplate(ServiceTemplateConfig config, AutomationHelper helper)
	{
		VisualStudioHelper = helper;
		Config = config;
	}

	public IList<EnvDTE.CodeClass> GetEntityList()
    {
		IList<EnvDTE.CodeClass> classList = new List<EnvDTE.CodeClass>();
		IList<EnvDTE.Project> projectList = new List<EnvDTE.Project>();
			
		if(Config.InterfacesProjectList.Count > 0)
        {
			foreach(var projectName in Config.ModelProjectList)
            {
				var project = VisualStudioHelper.GetProject(projectName);
				projectList.Add(project);
            }
        }

		foreach(var project in projectList)
        {
			string @namespace = project.Properties.Item("DefaultNamespace").Value.ToString();
			var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false,  @namespace);
			foreach(EnvDTE.CodeClass entity in allClasses)
			{
				var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(entity.Attributes, vsCMElement.vsCMElementAttribute, false);
					if (allAttributes.OfType<EnvDTE.CodeAttribute>()
								.Any(att => att.FullName == EntityAttribute))
				{
					classList.Add(entity);
				}
			}
        }

		return classList;
    }

	public IList<EnvDTE.CodeClass> GetClassMapList()
    {
		IList<EnvDTE.CodeClass> classList = new List<EnvDTE.CodeClass>();
		IList<EnvDTE.Project> projectList = new List<EnvDTE.Project>();
			
		if(Config.InterfacesProjectList.Count > 0)
        {
			foreach(var projectName in Config.ModelProjectList)
            {
				var project = VisualStudioHelper.CurrentProject;
				projectList.Add(project);
            }
        }

		foreach(var project in projectList)
        {
			string @namespace = project.Properties.Item("DefaultNamespace").Value.ToString();
			var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false, @namespace);
			foreach(EnvDTE.CodeClass entity in allClasses)
			{
				var baseClass = VisualStudioHelper.CodeModel.GetBaseClass(entity);
				if(baseClass != null)
				{
					if(baseClass.Name == "EntityTypeConfiguration")
					{
						classList.Add(entity);	
					}
				}
			}
        }

		return classList;
    }

	public void GenerateContextDbSets()
	{
		if (Config.BaseContextName == "System.Data.Entity.DbContext")
        {
			var entityList = GetEntityList();
			foreach(var entity in entityList)
			{
				WriteLine(string.Format(@"public System.Data.Entity.DbSet<{0}> {1} {{ get; set; }}", entity.FullName, entity.Name));
			}
        }
		
	}

	public void GenerateContextClassMaps()
	{
		if(Config.PassConnectionStringInContextConstructor == true)
		{
			var classMapList = GetClassMapList();
			foreach(var entity in classMapList)
			{
				WriteLine(string.Format(@"modelBuilder.Configurations.Add(new {0}());", entity.FullName));
			}
        }
	}


    public override string TransformText()
    {
#>
public partial class <#=Config.ContextName#> : <#= Config.BaseContextName #>
{
		<#+ if(Config.PassConnectionStringInContextConstructor == true) { #>
		public <#=Config.ContextName#>()
            : base("<#=Config.ContextName#>")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
		<#+ } #>

		<#+ if(Config.PassConnectionStringInContextConstructor == false) { #>
		public <#=Config.ContextName#>()
            : base()
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
		<#+ } #>

		public virtual bool ExistsInContext<TEntity>(TEntity entity)
			where TEntity : class
		{
			return this.Set<TEntity>().Local.Any(e => e == entity);
		}

		public override int SaveChanges()
	    {
	        try
	        {
                return base.SaveChanges();
            }
	        catch (System.Data.Entity.Validation.DbEntityValidationException e)
	        {
                A.Core.Validation.ValidationResult validationResult = new A.Core.Validation.ValidationResult();
	            foreach (var dbEntityValidationResult in e.EntityValidationErrors)
	            {
	                if (!dbEntityValidationResult.IsValid)
	                {
	                    foreach (var dbValidationError in dbEntityValidationResult.ValidationErrors)
	                    {
                            validationResult.ResultList.Add(new ValidationResultItem { Description = dbValidationError.ErrorMessage
                                , Level = ValidationResultLevelEnum.Error
                                , Key = dbValidationError.PropertyName});
                        }
	                }
	            }
	            throw new ValidationException(validationResult);
	        }
	    }

	    public override async Task<int> SaveChangesAsync()
	    {
            try
            {
                return await base.SaveChangesAsync();
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException e)
            {
                A.Core.Validation.ValidationResult validationResult = new A.Core.Validation.ValidationResult();
                foreach (var dbEntityValidationResult in e.EntityValidationErrors)
                {
                    if (!dbEntityValidationResult.IsValid)
                    {
                        foreach (var dbValidationError in dbEntityValidationResult.ValidationErrors)
                        {
                            validationResult.ResultList.Add(new ValidationResultItem
                            {
                                Description = dbValidationError.ErrorMessage
                                ,
                                Level = ValidationResultLevelEnum.Error
                                ,
                                Key = dbValidationError.PropertyName
                            });
                        }
                    }
                }
                throw new ValidationException(validationResult);
            }
	    }

	<#+
		GenerateContextDbSets();
	#>

	protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
			base.OnModelCreating(modelBuilder);
		<#+
			GenerateContextClassMaps();
		#>
		}
		
		public partial class <#=Config.ContextName#>Initializer : IDatabaseInitializer<<#=Config.ContextName#>>
		{
			partial void OnInitializeDatabase(ref <#=Config.ContextName#> context, ref bool isHandled);
			public void InitializeDatabase(<#=Config.ContextName#> context)
			{
				bool isHandled = false;
				OnInitializeDatabase(ref context, ref isHandled);
				if(!isHandled)
				{
					if (!context.Database.Exists())
					{
						context.Database.Create();
					}
				}
			}
		}

}

public partial class <#=Config.ContextName#>Registration : A.Core.Interface.IServicesRegistration
	{
		public int Priority {get; set; }
		public <#=Config.ContextName#>Registration()
		{
			Priority = 0; //This is root. Add new class with higher priority
		}
		public void Register(ref Autofac.ContainerBuilder container)
		{
			container.RegisterType<<#=Config.ContextName#>>()
                .As<<#=Config.ContextName#>>()
                .InstancePerLifetimeScope()
                .PropertiesAutowired(PropertyWiringOptions.AllowCircularDependencies)
                .EnableClassInterceptors();
		}
	}

<#+
		return this.GenerationEnvironment.ToString();
    }
}
#>
