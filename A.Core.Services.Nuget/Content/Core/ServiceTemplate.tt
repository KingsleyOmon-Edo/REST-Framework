<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="VisualStudioHelper.ttinclude" #>
<#@ include file="ServiceTemplate.Config.ttinclude" #>
<#@ include file="EFBasedServiceTemplate.ttinclude" #>
<#@ include file="ServiceRegistrationTemplate.ttinclude" #>
<#@ include file="EFContextTemplate.ttinclude" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Linq;
using Microsoft.Practices.Unity;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;

//<#= ServiceTemplateConfig.InterfacesProjectList[0] #>



<# ServiceHelper helper = new ServiceHelper(VisualStudioHelper, ServiceTemplateConfig); #>
<# 
	string @namespace = VisualStudioHelper.CurrentProject.Properties.Item("DefaultNamespace").Value.ToString();
	//write namespace and add all classes to it
	PopIndent();
	WriteLine(string.Format(@"namespace {0} 
	{{ ", @namespace));
	PushIndent("\t");
	var interfaceList = helper.GetInterfaceList();
	foreach(var i in interfaceList)
	{
				string baseInterface = "IReadService";
				if(helper.IsICRUDServiceInterface(i))
				{
					baseInterface = "ICRUDService";
				}
				//TODO: add different implementations here (Mongo, None etc)
				EFBasedServiceTemplate template = new EFBasedServiceTemplate(i, baseInterface, ServiceTemplateConfig.ContextName, VisualStudioHelper);
				WriteLine(template.TransformText());
	}
	
	ServiceRegistrationTemplate registrationTemplate = new ServiceRegistrationTemplate(interfaceList);
	WriteLine(registrationTemplate.TransformText());

	EFContextTemplate contextTemplate = new EFContextTemplate(ServiceTemplateConfig, VisualStudioHelper);
	WriteLine(contextTemplate.TransformText());

	PopIndent();
//end of namespace
WriteLine("}");
#>
<#+ 
	public class ServiceHelper
	{
        public string DefaultServiceBehaviourAttribute = "A.Core.Attributes.DefaultServiceBehaviourAttribute";
		public ServiceHelper(AutomationHelper helper, ServiceTemplateConfig config)
        {
			VisualStudioHelper = helper;
			ServiceTemplateConfig = config;
        }
		public AutomationHelper VisualStudioHelper { get; set; }
		public ServiceTemplateConfig ServiceTemplateConfig { get; set; }

		public IList<EnvDTE.CodeInterface> GetInterfaceList()
        {
			IList<EnvDTE.CodeInterface> interfaceList = new List<EnvDTE.CodeInterface>();
			IList<EnvDTE.Project> projectList = new List<EnvDTE.Project>();
			
			if(ServiceTemplateConfig.InterfacesProjectList.Count > 0)
            {
				foreach(var projectName in ServiceTemplateConfig.InterfacesProjectList)
                {
					var project = VisualStudioHelper.GetProject(projectName);
					projectList.Add(project);
                }
            }

			foreach(var project in projectList)
            {
				var allInterfaces = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementInterface, false);
				foreach(EnvDTE.CodeInterface entity in allInterfaces)
				{
					var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(entity.Attributes, vsCMElement.vsCMElementAttribute, false);
					 if (allAttributes.OfType<EnvDTE.CodeAttribute>()
								 .Any(att => att.FullName == DefaultServiceBehaviourAttribute))
					{
						interfaceList.Add(entity);
					}
				}
            }

			return interfaceList;
        }

		public bool IsIReadServiceInterface(EnvDTE.CodeInterface entity)
        {
		    bool isValid = false;
			var baseInterfaces = VisualStudioHelper.CodeModel.GetBaseInterfaces(entity);
			foreach(var baseInterface in baseInterfaces)
            {
				if(baseInterface.Name == "IReadService")
                {
					isValid = true;
                }
				else if(baseInterface.Name == "ICRUDService")
                {
					//if service also implements ICRUDService, it will be implemented in second method
					isValid = false;
					break;
                }
            }
			return isValid;
        }

		public bool IsICRUDServiceInterface(EnvDTE.CodeInterface entity)
        {
		    bool isValid = false;
			var baseInterfaces = VisualStudioHelper.CodeModel.GetBaseInterfaces(entity);
			foreach(var baseInterface in baseInterfaces)
            {
				if(baseInterface.Name == "ICRUDService")
                {
					isValid = true;
					break;
                }
            }
			return isValid;
        }
	}
#>