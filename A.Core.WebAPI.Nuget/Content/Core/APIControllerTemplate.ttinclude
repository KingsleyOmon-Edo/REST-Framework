<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>


<#+
public class APIControllerTemplate : TextTransformation
{
	public APIControllerTemplate(EnvDTE.CodeInterface entity, string controllerName, AutomationHelper helper, string @namespace)
    {
		Entity = entity;
		ControllerName =  controllerName;
		VisualStudioHelper = helper;
		Namespace = @namespace;
    }

	public string GetBaseClassName()
    {
		return "System.Web.Http.ApiController";
    }

	public AutomationHelper VisualStudioHelper { get; set; }

    public string ControllerName {get; set;}
    public EnvDTE.CodeInterface Entity { get; set; }
	public string Namespace {get; set;}

	private string ToLowerFirstCharacter(string str)
    {
		return str.Substring(0, 1).ToLower() + str.Substring(1);
    }

	private string GeneratePermissionFilter(string methodName, string operationType)
    {
		return string.Format("[{0}.Core.Permission(\"{1}.{2}\", \"{3}\")]", Namespace,Entity.FullName, methodName, operationType);
    }

	public void GenerateGetById(EnvDTE.CodeFunction method)
	 {
		
		string codeTypeName = method.Type.AsFullName;
		if(codeTypeName.StartsWith("System.Threading.Tasks.Task"))
        {
			codeTypeName = codeTypeName.Remove(0, codeTypeName.IndexOf('<') + 1);
			codeTypeName = codeTypeName.Substring(0, codeTypeName.Length  - 1);
        }

		//WriteLine("//Generating template for GetById for: " + method.Name + ", amel" + codeTypeName);	
		var codeType = VisualStudioHelper.CodeModel.FindCodeType(codeTypeName);
		if(codeType != null)
		{
				//Find property that is marked as [Key] or named Id
				string primaryKeyType = null;
				var allProperties = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(codeType.Members, EnvDTE.vsCMElement.vsCMElementProperty, true).OfType<EnvDTE.CodeProperty>();
				foreach(var property in allProperties)
                {
					//WriteLine("//Property: " + property.Name);
					if(property.Name == "Id")
					{
						primaryKeyType = property.Type.AsFullName;
					}
					var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, true);			
					foreach(var attr in allAttributes)
					{
						if(attr.Name == "Key")
						{
							primaryKeyType = property.Type.AsFullName;
						}
					}	
                }
				string additionalDataName = null;
				string additionalData = null;
				var allParameters =  VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Parameters, vsCMElement.vsCMElementParameter, true).OfType<EnvDTE.CodeParameter>();
				foreach(var prm in allParameters)
				{
					if(prm.Type.AsFullName.Contains("Additional"))
					{
						additionalDataName = string.Format(", [FromUri]{0} additionalData", prm.Type.AsFullName);
						additionalData = ", additionalData";
						break;
					}
				}

				bool isAsync = method.Type.AsFullName.StartsWith("System.Threading.Tasks.Task<");
								//WriteLine("//Async: " + isAsync + "KeyType: " + primaryKeyType);
				if(isAsync)
                {
					string returnType = method.Type.AsFullName.Remove(0, method.Type.AsFullName.IndexOf('<') + 1);
					returnType = returnType.Remove(returnType.LastIndexOf('>'));
					WriteLine(string.Format(
					@"
					[Route(""{{id}}"")]
					[System.Web.Http.Description.ResponseType(typeof({3}))]
					[System.Web.Http.HttpGet]
                    {4}
					public async System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult>  {2}({0} id{1})
					{{
						var result = await Service.{2}(id{5});
						if(result == null)
						{{
							return NotFound();
						}}
						else
						{{
							return Ok(result);
						}}
					}}", primaryKeyType, additionalDataName, method.Name,returnType, GeneratePermissionFilter(method.Name, "View"), additionalData));
                }
				else
                {
					WriteLine(string.Format(
					@"
					[Route(""{{id}}"")]
					[System.Web.Http.Description.ResponseType(typeof({3}))]
					[System.Web.Http.HttpGet]
					{4}
					public System.Web.Http.IHttpActionResult  {2}({0} id{1})
					{{
						var result = Service.{2}(id{5});
						if(result == null)
						{{
							return NotFound();
						}}
						else
						{{
							return Ok(result);
						}}
					}}", primaryKeyType, additionalDataName, method.Name,method.Type.AsFullName, GeneratePermissionFilter(method.Name, "View"), additionalData));
                }
		}
	 }

	 public void GenerateGet(EnvDTE.CodeFunction method, bool addRoute = false)
	 {
		//WriteLine("//Generating template for Get for: " + method.Name);	
		var codeType = VisualStudioHelper.CodeModel.FindCodeType(method.Type.AsFullName);
		if(codeType != null)
		{
			StringBuilder typeAndNameParamListString = new StringBuilder();
			StringBuilder paramListString = new StringBuilder();

			var allParameters =  VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Parameters, vsCMElement.vsCMElementParameter, true).OfType<EnvDTE.CodeParameter>();
				foreach(var prm in allParameters)
				{
					typeAndNameParamListString.Append(string.Format("[FromUri]{0} {1},", prm.Type.AsFullName, prm.Name));
					paramListString.Append(string.Format("{0},", prm.Name));

				}
			string typeAndNameParamString = typeAndNameParamListString.ToString().TrimEnd(',');
			string paramString = paramListString.ToString().TrimEnd(',');
			bool isAsync = method.Type.AsFullName.StartsWith("System.Threading.Tasks.Task<");
			string methodNameForRoute = method.Name.EndsWith("Async") ? method.Name.Substring(0, method.Name.Length - 5) : method.Name;
			if(isAsync)
            {
				string returnType = method.Type.AsFullName.Remove(0, method.Type.AsFullName.IndexOf('<') + 1);
				returnType = returnType.Remove(returnType.LastIndexOf('>'));
				WriteLine(string.Format(
				@"
				[Route({4})]
				[System.Web.Http.Description.ResponseType(typeof({2}))]
				[System.Web.Http.HttpGet]
                {5}
				public async System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> {0}({1})
				{{
					var result = await Service.{0}({3});
					return Ok(result);
				}}", method.Name, typeAndNameParamString, returnType, paramString, addRoute?"\""+ToLowerFirstCharacter(methodNameForRoute) +"\"":"\"\"", GeneratePermissionFilter(method.Name, "View")));//""
            }
			else
            {
				WriteLine(string.Format(
				@"
				[Route({4})]
				[System.Web.Http.Description.ResponseType(typeof({2}))]
				[System.Web.Http.HttpGet]
				{5}
				public System.Web.Http.IHttpActionResult  {0}({1})
				{{
					var result = Service.{0}({3});
					return Ok(result);
				}}", method.Name, typeAndNameParamString, method.Type.AsFullName, paramString, addRoute?"\""+ToLowerFirstCharacter(method.Name) +"\"":"\"\"", GeneratePermissionFilter(method.Name, "View")));//""
            }
			
		}
	 }

	 public void GenerateInsert(EnvDTE.CodeFunction method)
	 {
		//WriteLine("//Generating template for Insert for: " + method.Name);	
		var codeType = VisualStudioHelper.CodeModel.FindCodeType(method.Type.AsFullName);
		if(codeType != null)
		{
			StringBuilder typeAndNameParamListString = new StringBuilder();
			StringBuilder paramListString = new StringBuilder();

			var allParameters =  VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Parameters, vsCMElement.vsCMElementParameter, true).OfType<EnvDTE.CodeParameter>();
				foreach(var prm in allParameters)
				{
					if(prm.Name != "saveChanges")
					{
						typeAndNameParamListString.Append(string.Format("[FromBody]{0} {1},", prm.Type.AsFullName, prm.Name));
						paramListString.Append(string.Format("{0},", prm.Name));
					}
				}
			string typeAndNameParamString = typeAndNameParamListString.ToString().TrimEnd(',');
			string paramString = paramListString.ToString().TrimEnd(',');
			string additionalRouteName = "\"\"";
            if (method.Name != "Insert" && method.Name != "InsertAsync")
            {
				additionalRouteName = string.Format("\"{0}\"", method.Name.Replace("Async", "")).ToLower();
            }
			bool isAsync = method.Type.AsFullName.StartsWith("System.Threading.Tasks.Task<");
			if(isAsync)
            {
				string returnType = method.Type.AsFullName.Remove(0, method.Type.AsFullName.IndexOf('<') + 1);
				returnType = returnType.Remove(returnType.LastIndexOf('>'));

				WriteLine(string.Format(
				@"
				[Route({5})]
				[System.Web.Http.Description.ResponseType(typeof({2}))]
				[System.Web.Http.HttpPost]
                {4}
				public async System.Threading.Tasks.Task<HttpResponseMessage>  {0}({1})
				{{
					var result = await Service.{0}({3});					 
					var response = Request.CreateResponse<{2}>(HttpStatusCode.Created, result);
					return response;
				}}", method.Name, typeAndNameParamString, returnType, paramString, GeneratePermissionFilter(method.Name, "Edit"), additionalRouteName));
            }
			else
            {
				WriteLine(string.Format(
				@"
				[Route({5})]
				[System.Web.Http.Description.ResponseType(typeof({2}))]
				[System.Web.Http.HttpPost]
				{4}
				public HttpResponseMessage  {0}({1})
				{{
					var result = Service.{0}({3});					 
					var response = Request.CreateResponse<{2}>(HttpStatusCode.Created, result);
					return response;
				}}", method.Name, typeAndNameParamString, method.Type.AsFullName, paramString, GeneratePermissionFilter(method.Name, "Edit"), additionalRouteName));
            }
		}
	}

	 public void GenerateUpdate(EnvDTE.CodeFunction method, bool addMethodNameToRoute)
	 {
		string methodNameTmp = method.Name;
		string codeTypeName = method.Type.AsFullName;

		if(codeTypeName.StartsWith("System.Threading.Tasks.Task"))
        {
			codeTypeName = codeTypeName.Remove(0, codeTypeName.IndexOf('<') + 1);
			codeTypeName = codeTypeName.Substring(0, codeTypeName.Length  - 1);
        }

		//WriteLine("//Generating template for GetById for: " + method.Name + ", amel" + codeTypeName);	
		var codeType = VisualStudioHelper.CodeModel.FindCodeType(codeTypeName);

		if(codeType != null)
		{
			StringBuilder typeAndNameParamListString = new StringBuilder();
			StringBuilder paramListString = new StringBuilder();
			
			//Find property that is marked as [Key] or named Id
			string primaryKeyType = null;
			string primaryKeyName = null;
			var allProperties = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(codeType.Members, EnvDTE.vsCMElement.vsCMElementProperty, true).OfType<EnvDTE.CodeProperty>();
			foreach(var property in allProperties)
            {
				if(property.Name == "Id")
				{
					primaryKeyType = property.Type.AsFullName;
				}
				var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, true);			
				foreach(var attr in allAttributes)
				{
					if(attr.Name == "Key")
					{
						primaryKeyType = property.Type.AsFullName;
					}
				}	
            }

			bool isFirstParameter = true;
			int paramsCount = 0;
			var allParameters =  VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Parameters, vsCMElement.vsCMElementParameter, true).OfType<EnvDTE.CodeParameter>();
				foreach(var prm in allParameters)
				{
					paramsCount++;
					if(prm.Name == "saveChanges")
						{
							continue;
						}
					typeAndNameParamListString.Append(string.Format("{2}{0} {1},", isFirstParameter && primaryKeyType != null ? primaryKeyType : prm.Type.AsFullName, prm.Name, isFirstParameter?"[FromUri]":"[FromBody]"));
					paramListString.Append(string.Format("{0},", prm.Name));
					isFirstParameter = false;

				}
			string typeAndNameParamString = typeAndNameParamListString.ToString().TrimEnd(',');
			string paramString = paramListString.ToString().TrimEnd(',');
			string methodNameInRouteIfNeeded = "";
			string idInRoutePart = primaryKeyType == null || paramsCount == 0 ? "" : "{id}";
			if(addMethodNameToRoute)
            {
				string methodNameForRoute = method.Name.EndsWith("Async") ? method.Name.Substring(0, method.Name.Length - 5) : method.Name;
				if(idInRoutePart == "")
                {
					methodNameInRouteIfNeeded = string.Format("{0}", ToLowerFirstCharacter(methodNameForRoute));
                }
				else
                {
					methodNameInRouteIfNeeded = string.Format("/{0}", ToLowerFirstCharacter(methodNameForRoute));
				}
            }
			bool isAsync = method.Type.AsFullName.StartsWith("System.Threading.Tasks.Task<");
			
			if(isAsync)
            {
				string returnType = method.Type.AsFullName.Remove(0, method.Type.AsFullName.IndexOf('<') + 1);
				returnType = returnType.Remove(returnType.LastIndexOf('>'));
				WriteLine(string.Format(
				@"
				[Route(""{6}{4}"")]
				[System.Web.Http.Description.ResponseType(typeof({2}))]
				[System.Web.Http.HttpPut]
				{5}
				public async System.Threading.Tasks.Task<HttpResponseMessage>  {0}({1})
				{{
					var result = await Service.{0}({3});					 
					var response = Request.CreateResponse<{2}>(HttpStatusCode.OK, result);
					return response;
				}}", method.Name, typeAndNameParamString, returnType, paramString, methodNameInRouteIfNeeded, GeneratePermissionFilter(method.Name, "Edit"), idInRoutePart));
            }
			else
            {
				WriteLine(string.Format(
				@"
				[Route(""{6}{4}"")]
				[System.Web.Http.Description.ResponseType(typeof({2}))]
				[System.Web.Http.HttpPut]
				{5}
				public HttpResponseMessage  {0}({1})
				{{
					var result = Service.{0}({3});					 
					var response = Request.CreateResponse<{2}>(HttpStatusCode.OK, result);
					return response;
				}}", method.Name, typeAndNameParamString, method.Type.AsFullName, paramString, methodNameInRouteIfNeeded, GeneratePermissionFilter(method.Name, "Edit"), idInRoutePart));
            }
		}
	 }

	 public void GenerateDelete(EnvDTE.CodeFunction method)
	 {
		//WriteLine("//Generating template for Delete for: " + method.Name);	
		var codeType = VisualStudioHelper.CodeModel.FindCodeType(method.Type.AsFullName);
		if(codeType != null)
		{
				//Find property that is marked as [Key] or named Id
				string primaryKeyType = null;
				var allProperties = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(codeType.Members, EnvDTE.vsCMElement.vsCMElementProperty, true).OfType<EnvDTE.CodeProperty>();
				foreach(var property in allProperties)
                {
				WriteLine("//Getting property for Delete: " + property.Name);	
					if(property.Name == "Id")
					{
						primaryKeyType = property.Type.AsFullName;
					}
					var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, true);			
					foreach(var attr in allAttributes)
					{
						if(attr.Name == "Key")
						{
							primaryKeyType = property.Type.AsFullName;
						}
					}	
                }

				var allParameters =  VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Parameters, vsCMElement.vsCMElementParameter, true).OfType<EnvDTE.CodeParameter>();
				primaryKeyType = allParameters.First().Type.AsFullName;
				
				bool isAsync = method.Type.AsFullName.StartsWith("System.Threading.Tasks.Task<");
				if(isAsync)
                {
					string returnType = method.Type.AsFullName.Remove(0, method.Type.AsFullName.IndexOf('<') + 1);
					returnType = returnType.Remove(returnType.LastIndexOf('>'));
					WriteLine(string.Format(
					@"
					[Route(""{{id}}"")]
					[System.Web.Http.Description.ResponseType(typeof({2}))]
					[System.Web.Http.HttpDelete]
                    {3}
					public async System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult>  {1}({0} id)
					{{
						var result = await Service.{1}(id);
						if(result == null)
						{{
							return NotFound();
						}}
						else
						{{
							return Ok(result);
						}}
					}}", primaryKeyType, method.Name,returnType, GeneratePermissionFilter(method.Name, "Delete")));
                }
				else
                {
					WriteLine(string.Format(
					@"
					[Route(""{{id}}"")]
					[System.Web.Http.Description.ResponseType(typeof({2}))]
					[System.Web.Http.HttpDelete]
					{3}
					public System.Web.Http.IHttpActionResult  {1}({0} id)
					{{
						var result = Service.{1}(id);
						if(result == null)
						{{
							return NotFound();
						}}
						else
						{{
							return Ok(result);
						}}
					}}", primaryKeyType, method.Name,method.Type.AsFullName, GeneratePermissionFilter(method.Name, "Delete")));
                }
		}
	 }

	public void GenerateDownload(EnvDTE.CodeFunction method)
	 {
		//WriteLine("//Generating template for Insert for: " + method.Name);	
		var codeType = VisualStudioHelper.CodeModel.FindCodeType(method.Type.AsFullName);
		if(codeType != null)
		{
			StringBuilder typeAndNameParamListString = new StringBuilder();
			StringBuilder paramListString = new StringBuilder();

			var allParameters =  VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Parameters, vsCMElement.vsCMElementParameter, true).OfType<EnvDTE.CodeParameter>();
				foreach(var prm in allParameters)
				{
					typeAndNameParamListString.Append(string.Format("[FromUri]{0} {1},", prm.Type.AsFullName, prm.Name));
					paramListString.Append(string.Format("{0},", prm.Name));
				}
			string typeAndNameParamString = typeAndNameParamListString.ToString().TrimEnd(',');
			string paramString = paramListString.ToString().TrimEnd(',');

			bool isAsync = method.Type.AsFullName.StartsWith("System.Threading.Tasks.Task<");
			if(isAsync)
            {
				string returnType = method.Type.AsFullName.Remove(0, method.Type.AsFullName.IndexOf('<') + 1);
				returnType = returnType.Remove(returnType.LastIndexOf('>'));

				WriteLine(string.Format(
				@"
				[Route(""{0}"")]
				[System.Web.Http.Description.ResponseType(typeof(object))]
				[System.Web.Http.HttpGet]
                {4}
				public async System.Threading.Tasks.Task<HttpResponseMessage>  {0}({1})
				{{
					//var contentType = HttpContext.Current.Request.ContentType;
					HttpResponseMessage resp = new HttpResponseMessage();
					A.Core.Model.DownloadRequest additionalDownloadData = await Service.{0}({3});
					if (string.IsNullOrWhiteSpace(additionalDownloadData.FileName))
				    {{
				        return new HttpResponseMessage(HttpStatusCode.NotFound);
				    }}
					resp.Content = new PushStreamContent(async (responseStream, content, context) =>
					{{
						await additionalDownloadData.PushStreamFunction(responseStream);
					}});

					resp.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue(additionalDownloadData.DispositionType);
					resp.Content.Headers.ContentDisposition.FileName = additionalDownloadData.FileName;
					resp.Content.Headers.ContentType = new MediaTypeHeaderValue(additionalDownloadData.ContentType);
			
					return resp;

				}}", method.Name, typeAndNameParamString, returnType, paramString, GeneratePermissionFilter(method.Name, "View")));
            }
			else
            {
				WriteLine(string.Format(
				@"
				[Route(""{0}"")]
				[System.Web.Http.Description.ResponseType(typeof(object))]
				[System.Web.Http.HttpGet]
				{4}
				public  HttpResponseMessage  {0}({1})
				{{
					//var contentType = HttpContext.Current.Request.ContentType;
					HttpResponseMessage resp = new HttpResponseMessage();
					A.Core.Model.DownloadRequest additionalDownloadData = Service.{0}({3});
					if (string.IsNullOrWhiteSpace(additionalDownloadData.FileName))
				    {{
				        return new HttpResponseMessage(HttpStatusCode.NotFound);
				    }}
					resp.Content = new PushStreamContent(async (responseStream, content, context) =>
					{{
						await additionalDownloadData.PushStreamFunction(responseStream);
					}});

					resp.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue(additionalDownloadData.DispositionType);
					resp.Content.Headers.ContentDisposition.FileName = additionalDownloadData.FileName;
					resp.Content.Headers.ContentType = new MediaTypeHeaderValue(additionalDownloadData.ContentType);
			
					return resp;

				}}", method.Name, typeAndNameParamString, method.Type.AsFullName, paramString, GeneratePermissionFilter(method.Name, "View")));
            }
		}
	}


    public override string TransformText()
    {
#>
[RoutePrefix("<#= ControllerName #>")]
public partial class <#= ControllerName #>Controller : <#= GetBaseClassName()#>
{
	public <#= Entity.FullName #> Service { get; set; }
	
	<#+
			System.Diagnostics.Debug.WriteLine("//Getting all methods for:" + Entity.FullName ); 
			//WriteLine("//Getting all methods for:" + Entity.FullName);
			if(Entity.FullName.Contains("IAccountService"))
            {

            }
			string DefaultMethodBehaviourAttribute = "A.Core.Attributes.DefaultMethodBehaviourAttribute";
			var methods = VisualStudioHelper.CodeModel.GetAllMethodsOnInterface((EnvDTE80.CodeInterface2)Entity);
			foreach(var method in methods)
			{
				//WriteLine("//metoda: " + method.Name + ", " + method.FullName);
				EnvDTE.CodeAttribute defaultMethodBehaviour = null;
				var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Attributes, vsCMElement.vsCMElementAttribute, false).OfType<EnvDTE.CodeAttribute>();
				foreach(var attr in allAttributes)
                {
					if(attr.FullName == DefaultMethodBehaviourAttribute)
					{
						defaultMethodBehaviour = attr;
						break; 
					}
					//WriteLine("//" + attr.Name + "|" + attr.Value);
                }
				if(((method.Name == "Get" || method.Name == "GetAsync") && method.FullName.Contains("IReadService"))
					 || (defaultMethodBehaviour != null && defaultMethodBehaviour.Value == "BehaviourEnum.GetById"))
				 {
					//render get by Id method
					GenerateGetById(method);
				 }
				else if((method.Name == "GetPage" || method.Name == "GetPageAsync") && method.FullName.Contains("IReadService"))
				 {
					//render get by Id method
					GenerateGet(method);
				 }
				else if(defaultMethodBehaviour != null && defaultMethodBehaviour.Value == "BehaviourEnum.Get" && !method.FullName.Contains("IReadService"))
				 {
					//render get by Id method
					GenerateGet(method, true);
				 }
				else if(((method.Name == "Insert" || method.Name == "InsertAsync") && method.FullName.Contains("ICRUDService"))
					 || (defaultMethodBehaviour != null && (defaultMethodBehaviour.Value == "BehaviourEnum.Insert"
															|| defaultMethodBehaviour.Value == "BehaviourEnum.StateMachineInsert"
															|| defaultMethodBehaviour.Value == "BehaviourEnum.StateMachineUpdateWithoutServiceImpl")))
				 {
					//render get by Id method
					GenerateInsert(method);
				 }
				else if(((method.Name == "Update" || method.Name == "UpdateAsync")&& method.FullName.Contains("ICRUDService"))
					 || (defaultMethodBehaviour != null && (defaultMethodBehaviour.Value == "BehaviourEnum.Update"
															 || defaultMethodBehaviour.Value == "BehaviourEnum.StateMachineUpdate"
													|| defaultMethodBehaviour.Value == "BehaviourEnum.StateMachineUpdateWithoutServiceImpl")))
				 {
					 bool addMethodNameToRoute = (defaultMethodBehaviour != null && (defaultMethodBehaviour.Value == "BehaviourEnum.StateMachineUpdate"
													|| defaultMethodBehaviour.Value == "BehaviourEnum.StateMachineUpdateWithoutServiceImpl")
													|| (defaultMethodBehaviour != null && defaultMethodBehaviour.Value == "BehaviourEnum.Update" && !method.FullName.Contains("ICRUDService")));
					 
					//render update by Id method
					GenerateUpdate(method, addMethodNameToRoute);
				 }
				 else if(defaultMethodBehaviour != null && (defaultMethodBehaviour.Value == "BehaviourEnum.Delete" || defaultMethodBehaviour.Value == "BehaviourEnum.DeleteWithoutServiceImpl"))
				 {
					//render get by Id method
					GenerateDelete(method);
				 }
				 else if(defaultMethodBehaviour != null && (defaultMethodBehaviour.Value == "BehaviourEnum.Download"))
				 {
					GenerateDownload(method);
                 }


			}
			/*
		
		IList<EnvDTE.CodeFunction> methods = new List<EnvDTE.CodeFunction>();
	    var baseInterfaces = VisualStudioHelper.CodeModel.GetAllBaseInterfaces(Entity);

		foreach(EnvDTE.CodeInterface i in baseInterfaces)
        {
		WriteLine("//BASE FULLNAME" +i.FullName);
			//KNOWN BUG IN VS - WE CAN'T GET ATTRIBUTES FROM GENERICS, SO WE HAVE TO HARDCODE SOME CODE https://connect.microsoft.com/VisualStudio/feedback/details/816801/t4-scripts-cannot-access-the-attributes-on-inherited-functions#tabs
			if(i.Name == "IReadService")
            {
				//inheritsIReadService = true;
            }
			if(i.Name == "ICRUDService")
            {
				//inheritsICRUDService = true;
            }
			var baseInterfacesMethods = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(i.Members, EnvDTE.vsCMElement.vsCMElementFunction, true).OfType<EnvDTE.CodeFunction>();
			foreach(EnvDTE.CodeFunction method in baseInterfacesMethods)
            {
				var allAttributes = i.Attributes;//VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Attributes, vsCMElement.vsCMElementAttribute, true);
				if (allAttributes.OfType<EnvDTE.CodeAttribute>()
							.Any(att => att.FullName == DefaultMethodBehaviourAttribute))
				{
					//methods.Add(method);
				}
            }
        }

		var interfaceMethods = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(Entity.Members, EnvDTE.vsCMElement.vsCMElementFunction, true).OfType<EnvDTE.CodeFunction>();
		foreach(EnvDTE.CodeFunction method in interfaceMethods)
            {
				var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Attributes, vsCMElement.vsCMElementAttribute, false);
				if (allAttributes.OfType<EnvDTE.CodeAttribute>()
							.Any(att => att.FullName == DefaultMethodBehaviourAttribute))
				{
					methods.Add(method);
				}
            }

		foreach(var method in methods)
        {
			WriteLine("//" + method.Name);
        }
		*/
        
	#>



	<#+ //if we inherit base read service, we need to generate get and get page methods 
	//if(inheritsIReadService)
	/*{
		foreach(var i in baseInterfaces)
        {
			if(i.Name == "IReadService")
            {
				WriteLine("//Read service " + i.FullName);
				string firstArgument = i.FullName.Split('<', '>')[1];
				string entityName = firstArgument.Split(',')[0];
				var cls = VisualStudioHelper.CodeModel.FindClass(entityName);
				if(cls != null)
                {
					WriteLine("//FULL RETREIVED NAME " + cls.FullName);
                }
				

				var baseInterfacesMethods = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(i.Members, EnvDTE.vsCMElement.vsCMElementFunction, true).OfType<EnvDTE.CodeFunction>();
				foreach(EnvDTE.CodeFunction method in baseInterfacesMethods)
				{
					WriteLine("//" + method.Name);
					if(method.Name == "Get" || method.Name == "GetPage")
                    {
						string paramString = "string empty"; //we will construct parameters here
                        if(method.Name == "Get")
                        {
							WriteLine((method.Type.CodeType).FullName.ToString());
							var allProperties = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Type.CodeType.Members, EnvDTE.vsCMElement.vsCMElementProperty, true).OfType<EnvDTE.CodeProperty>();
							foreach(var property in allProperties)
                            {
								var allAttributes = property.Attributes;//VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, true);
								
								//if(attr.Name == "Key")
                                {
									WriteLine("//attr: " + property.Name);
								}
                            }
							
                        }
						WriteLine(string.Format("public {0} {1}({2})", method.Type.AsFullName, method.Name, paramString));
						PushIndent("\t");
						WriteLine("{");

						WriteLine("}");
						PopIndent();
					}
				}

				
				
			}
        }
	} */#>
}
<#+
		return this.GenerationEnvironment.ToString();
    }

}
#>