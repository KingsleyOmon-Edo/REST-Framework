// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PermissionModule.Services.Database;

namespace PermissionModule.Services.Migrations
{
    [DbContext(typeof(PermissionModuleContext))]
    partial class PermissionModuleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PermissionModule.Services.Database.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OperationType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerPermission")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<short>("PermissionGroupId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId")
                        .HasName("IX_PermissionGroupId");

                    b.ToTable("Permission","permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(2692),
                            Description = "Root permission",
                            IsAllowed = false,
                            IsDeleted = false,
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(3251),
                            Name = "*",
                            OwnerPermission = "PermissionModule.Permission.Insert",
                            PermissionGroupId = (short)1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(4176),
                            Description = "Permission - view data",
                            IsAllowed = false,
                            IsDeleted = false,
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(4197),
                            Name = "PermissionModule.Permission.*",
                            OperationType = "View",
                            OwnerPermission = "PermissionModule.Permission.Insert",
                            PermissionGroupId = (short)1
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(4242),
                            Description = "Permission - edit data",
                            IsAllowed = false,
                            IsDeleted = false,
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(4246),
                            Name = "PermissionModule.Permission.*",
                            OperationType = "Edit",
                            OwnerPermission = "PermissionModule.Permission.Insert",
                            PermissionGroupId = (short)1
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(4271),
                            Description = "Permission - delete data",
                            IsAllowed = false,
                            IsDeleted = false,
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(4275),
                            Name = "PermissionModule.Permission.*",
                            OperationType = "Delete",
                            OwnerPermission = "PermissionModule.Permission.Insert",
                            PermissionGroupId = (short)1
                        });
                });

            modelBuilder.Entity("PermissionModule.Services.Database.PermissionGroup", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup","permission");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 45, DateTimeKind.Local).AddTicks(5317),
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 45, DateTimeKind.Local).AddTicks(5906),
                            Name = "System"
                        });
                });

            modelBuilder.Entity("PermissionModule.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OwnerPermission")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<short>("RoleTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RoleTypeId")
                        .HasName("IX_RoleTypeId");

                    b.ToTable("Role","permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 44, DateTimeKind.Local).AddTicks(7672),
                            Description = "The one who manages the system",
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 44, DateTimeKind.Local).AddTicks(8442),
                            Name = "Super Admin",
                            OwnerPermission = "*",
                            RoleTypeId = (short)1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 44, DateTimeKind.Local).AddTicks(9847),
                            Description = "User with limited permissions",
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 44, DateTimeKind.Local).AddTicks(9870),
                            Name = "User",
                            OwnerPermission = "*",
                            RoleTypeId = (short)1
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 44, DateTimeKind.Local).AddTicks(9942),
                            Description = "Admin with somewhat limited functionalities",
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 44, DateTimeKind.Local).AddTicks(9946),
                            Name = "Admin",
                            OwnerPermission = "*",
                            RoleTypeId = (short)1
                        });
                });

            modelBuilder.Entity("PermissionModule.Services.Database.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId")
                        .HasName("IX_PermissionId");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.ToTable("RolePermission","permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(8656),
                            IsAllowed = true,
                            IsDeleted = false,
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 46, DateTimeKind.Local).AddTicks(9585),
                            PermissionId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("PermissionModule.Services.Database.RoleRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentRoleId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoleId")
                        .HasName("IX_ParentRoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.ToTable("RoleRelations","permission");
                });

            modelBuilder.Entity("PermissionModule.Services.Database.RoleType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAllowedAssigningPermissionToRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsAllowedAssigningToUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowedMatchingOnSameLevel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("PermissionHierarchyLevel")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("RoleType","permission");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Code = "USER_TYPE",
                            CreatedById = "1",
                            CreatedOn = new DateTime(2020, 1, 4, 15, 18, 51, 36, DateTimeKind.Local).AddTicks(9018),
                            IsAllowedAssigningPermissionToRole = true,
                            IsAllowedAssigningToUsers = true,
                            IsAllowedMatchingOnSameLevel = true,
                            IsMultipleAllowed = false,
                            ModifiedById = "1",
                            ModifiedOn = new DateTime(2020, 1, 4, 15, 18, 51, 41, DateTimeKind.Local).AddTicks(843),
                            Name = "User type",
                            PermissionHierarchyLevel = (short)1
                        });
                });

            modelBuilder.Entity("PermissionModule.Services.Database.Permission", b =>
                {
                    b.HasOne("PermissionModule.Services.Database.PermissionGroup", "PermissionGroup")
                        .WithMany("Permission")
                        .HasForeignKey("PermissionGroupId")
                        .HasConstraintName("FK_permission.Permission_permission.PermissionGroup_PermissionGroupId")
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionModule.Services.Database.Role", b =>
                {
                    b.HasOne("PermissionModule.Services.Database.RoleType", "RoleType")
                        .WithMany("Role")
                        .HasForeignKey("RoleTypeId")
                        .HasConstraintName("FK_permission.Role_permission.RoleType_RoleTypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionModule.Services.Database.RolePermission", b =>
                {
                    b.HasOne("PermissionModule.Services.Database.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_permission.RolePermission_permission.Permission_PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PermissionModule.Services.Database.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_permission.RolePermission_permission.Role_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionModule.Services.Database.RoleRelations", b =>
                {
                    b.HasOne("PermissionModule.Services.Database.Role", "ParentRole")
                        .WithMany("RoleRelationsParentRole")
                        .HasForeignKey("ParentRoleId")
                        .HasConstraintName("FK_permission.RoleRelations_permission.Role_ParentRoleId");

                    b.HasOne("PermissionModule.Services.Database.Role", "Role")
                        .WithMany("RoleRelationsRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_permission.RoleRelations_permission.Role_RoleId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
